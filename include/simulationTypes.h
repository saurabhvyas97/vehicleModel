//Header file: simulationTypes.h
#ifndef SIMULATION_TYPES_H
#define SIMULATION_TYPES_H

typedef enum
{
    DRIVE,
    REVERSE,
    NEUTRAL
} DrivingDirection_E;

//Define structure for driving commands
typedef struct
{
    float               throttle;       //Throttle input in percentage
    float               brake;          //Brake input in percentage
    float               steeringAngle;  //Steering angle in rad
    DrivingDirection_E  direction; //Driving direction
} DrivingCommands;

// Define structure for lateral dynamics outputs
typedef struct LateralDynamics {
    float lateralAcceleration;        // Lateral acceleration of the vehicle in m/s^2
    float lateralVelocity;            // Lateral velocity of the vehicle in m/s
    float bodySlipAngle;              // Body slip angle of the vehicle in rad
    float yawRate;                    // Yaw rate of the vehicle in rad/s
    float bodyRollAngle;              // Body roll angle of the vehicle in rad
    float slipAngleFrontLeft;         // Slip angle of the front Left tires in rad
    float slipAngleFrontRight;         // Slip angle of the front Right tires in rad
    float slipAngleRearLeft;          // Slip angle of the rear Left tires in rad
    float slipAngleRearRight;         // Slip angle of the rear Right tires in rad
    float normalForceFrontLeft;      // Normal force acting on the front Left tires in N
    float normalForceFrontRight;      // Normal force acting on the front Right tires in N
    float normalForceRearLeft;       // Normal force acting on the rear Left tires in N
    float normalForceRearRight;       // Normal force acting on the rear Right tires in N
    float totalLateralForce;          // Total lateral force acting on the vehicle in N
} LateralDynamics;

//Define structure for longitudinal dynamics outputs
typedef struct
{
    float   longitudinalAcceleration;   //Longitudinal acceleration of the vehicle in m/s^2
    float   longitudinalVelocity;       //Longitudinal velocity of the vehicle in m/s
    float   slipRatioFrontInner;        //Slip ratio of the front inner tires
    float   slipRatioFrontOuter;        //Slip ratio of the front outer tires
    float   slipRatioRearInner;         //Slip ratio of the rear inner tires
    float   slipRatioRearOuter;         //Slip ratio of the rear outer tires
} LongitudinalDynamics;

// Forward declaration of LateralDynamics
typedef struct LateralDynamics LateralDynamics;

// Structure for tire parameters
typedef struct {
    float mu;
    float stiffnessFactor;
    float shapeFactor;
    float peakForce;
} TireParameters; 

// Structure for tire inputs
typedef struct {
    float slipAngle;      // Tire's slip angle in radians
    float normalForce;    // Normal force acting on the tire in Newton
} TireInputs;

typedef struct {
    float lateralForce;   // Lateral force generated by the tire in Newton
    float longForce;      // Longitudinal Force generated by the tire in Newton
    float lateralForceFrontLeft;     // Lateral force generated by the front Left tire in Newton
    float lateralForceFrontRight;     // Lateral force generated by the front Right tire in Newton
    float lateralForceRearLeft;      // Lateral force generated by the rear Left tire in Newton
    float lateralForceRearRight;      // Lateral force generated by the rear Right tire in Newton
    float longitudinalForceFrontLeft;    // Longitudinal force generated by the front Left tire in Newton
    float longitudinalForceFrontRight;    // Longitudinal force generated by the front Right tire in Newton
    float longitudinalForceRearLeft;     // Longitudinal force generated by the rear Left tire in Newton
    float longitudinalForceRearRight;     // Longitudinal force generated by the rear Right tire in Newton
} TireOutputs;

//Structure for vehicle parameters
typedef struct 
{
    float   mass;                   //Mass of the vehicle in kg
    float   wheelbase;              //Wheelbase of the vehicle in m
    float   trackWidthFront;        //Front track width of the vehicle in m
    float   trackWidthRear;         //Rear track width of the vehicle in m
    float   cgHeight;               //Height of the center of gravity of the vehicle in m
    float   frontalArea;            //Frontal area of the vehicle in m^2
    float   dragCoefficient;        //Drag coefficient of the vehicle
    float   momentOfInertia;        //Moment of inertia of the vehicle in kg-m^2
    float   wheelRadius;            //Radius of the wheel in m
    float   powertraingearRatio;    //Gear ratio of the vehicle's driveline
    float   weightBiasFront;        //Weight bias towards the front of the vehicle
    float   steeringRatio;          //Steering ratio of the vehicle
    float   maxSteeringAngle;       //Maximum steering angle of the vehicle in rad
    float   maxLongitudinalVelocity;    //Maximum longitudinal velocity of the vehicle in m/s
} VehicleParameters;

//Define external variables
extern VehicleParameters g_vehicleParam;

//Define the structure for simulation parameters
typedef struct
{
    float   timeStep;               //Time step for the simulation
    float   endTime;                //End time for the simulation
    float   initialVelocity;        //Initial velocity of the vehicle
    float   initialYawRate;         //Initial yaw rate of the vehicle
    float   initialWheelAngle;      //Initial steering wheel angle
    float   rad2deg;                //Conversion factor for radians to degrees
    float   deg2rad;                //Conversion factor for degrees to radians
    float   gravity;                //Acceleration due to gravity
    float   logInterval;            //Interval for logging the simulation data
} SimulationParameters;

extern SimulationParameters g_simulationParam;

#endif //SIMULATION_TYPES_H